import streamlit as st
import re, io
import pandas as pd
import fitz  # PyMuPDF
from openpyxl import Workbook, load_workbook

st.set_page_config(page_title="Waybill Maker", page_icon="üì¶", layout="wide")
st.title("üì¶ Waybill Maker")

# ---------- regex ----------
RE_MPN    = re.compile(r"\b(8\d{10})\b")
RE_ORDER  = re.compile(r"(?:#\s*)?(1\d{5})\b")
RE_MONEY  = re.compile(r"\d{1,3}(?:[ \u00A0]?\d{3})*[.,]\d{2}")   # 1 234,56 | 1234.56
RE_DEC    = re.compile(r"^\d{1,4}[.,]\d{2}$")                    # 7,00 | 400,00

def to_float(tok: str) -> float:
    return float(tok.replace(" ", "").replace("\u00A0", "").replace(",", "."))

def to_int(tok: str) -> int:
    return int(round(to_float(tok)))

# ---------- PDF -> –ª–∏–Ω–∏–∏ —Å–ª–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ ----------
def page_lines_with_words(pdf_bytes: bytes):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü, –≥–¥–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ = —Å–ø–∏—Å–æ–∫ '–ª–∏–Ω–∏–π',
    –∞ –ª–∏–Ω–∏—è = —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤: (x0, y0, x1, y1, text) –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ x."""
    doc = fitz.open(stream=pdf_bytes, filetype="pdf")
    all_pages = []
    for p in doc:
        words = p.get_text("words")  # x0,y0,x1,y1, word, block, line, word_no
        # —Å–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ '–ø–æ—á—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º—É' y (—Ç–æ–ª–µ—Ä–∞–Ω—Å)
        words.sort(key=lambda w: (round(w[1], 1), w[0]))
        lines = []
        line = []
        last_y = None
        tol = 1.2  # —Ç–æ–ª–µ—Ä–∞–Ω—Å –ø–æ y (pt)
        for w in words:
            x0, y0, x1, y1, text = w[:5]
            if last_y is None or abs(y0 - last_y) <= tol:
                line.append((x0, y0, x1, y1, text))
                last_y = y0 if last_y is None else (last_y + y0) / 2
            else:
                if line:
                    line.sort(key=lambda t: t[0])
                    lines.append(line)
                line = [(x0, y0, x1, y1, text)]
                last_y = y0
        if line:
            line.sort(key=lambda t: t[0])
            lines.append(line)
        all_pages.append(lines)
    return all_pages

# ---------- –ø–∞—Ä—Å–µ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–π ----------
def parse_invoice(pdf_bytes: bytes) -> pd.DataFrame:
    pages = page_lines_with_words(pdf_bytes)
    rows = []

    for lines in pages:
        # –¥–ª—è –ø–æ–∏—Å–∫–∞ order —É–¥–æ–±–Ω–æ –∏–º–µ—Ç—å ¬´–ø–ª–æ—Å–∫–∏–π¬ª —Ç–µ–∫—Å—Ç —Å—Ç—Ä–æ–∫–∏
        plain_lines = [" ".join([w[4] for w in ln]) for ln in lines]

        for i, ln in enumerate(lines):
            # —è–∫–æ—Ä—å: MPN –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
            texts = [w[4] for w in ln]
            joined = " ".join(texts)
            m_mpn = RE_MPN.search(joined)
            if not m_mpn:
                continue

            mpn = m_mpn.group(1)

            # --- Order: –∏—â–µ–º –Ω–∞–≤–µ—Ä—Ö –¥–æ 5 —Å—Ç—Ä–æ–∫, –∏–Ω–∞—á–µ 1 –≤–Ω–∏–∑
            order = ""
            for k in range(i, max(-1, i - 5), -1):
                m_o = RE_ORDER.search(plain_lines[k])
                if m_o:
                    order = m_o.group(1)
                    break
            if not order and i + 1 < len(plain_lines):
                m_o = RE_ORDER.search(plain_lines[i + 1])
                if m_o:
                    order = m_o.group(1)

            # --- Qty: –∏—â–µ–º —Ç–æ–∫–µ–Ω —Å—Ä–∞–∑—É —Å–ø—Ä–∞–≤–∞ –æ—Ç 'GAB' –≤ —Ç–æ–π –∂–µ –ª–∏–Ω–∏–∏
            qty = None
            def qty_from_line(line_words):
                # –∏—â–µ–º –∏–Ω–¥–µ–∫—Å —Ç–æ–∫–µ–Ω–∞ 'GAB'
                for idx, w in enumerate(line_words):
                    if "GAB" == w[4].upper():
                        # –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Å–ø—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω –≤–∏–¥–∞ 7,00 –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 80 pt
                        x_gab = w[2]
                        best = None
                        best_dx = None
                        for j in range(idx + 1, min(idx + 8, len(line_words))):
                            t = line_words[j][4]
                            if RE_DEC.match(t):
                                dx = line_words[j][0] - x_gab
                                if 0 <= dx <= 80:  # —Ä—è–¥–æ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
                                    if best_dx is None or dx < best_dx:
                                        best_dx = dx
                                        best = t
                        if best:
                            return to_int(best)
                return None

            qty = qty_from_line(ln)
            # –µ—Å–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É ‚Äî –ø—Ä–æ–±—É–µ–º —Ç–∞–º, –Ω–æ –≤ —Ç–æ–π –∂–µ –∑–æ–Ω–µ X
            if qty is None and i + 1 < len(lines):
                qty = qty_from_line(lines[i + 1])
            if qty is None:
                qty = 0

            # --- Total (Summa): –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω–µ–∂–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ (–ø–æ X)
            def last_money_from_line(line_words):
                money_tokens = [(w[0], w[4]) for w in line_words if RE_MONEY.fullmatch(w[4])]
                if money_tokens:
                    money_tokens.sort(key=lambda t: t[0])  # –ø–æ x
                    return money_tokens[-1][1]
                return None

            total_tok = last_money_from_line(ln)
            if not total_tok and i + 1 < len(lines):
                total_tok = last_money_from_line(lines[i + 1])
            total = total_tok or "0,00"

            # –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ total —Å–æ–≤–ø–∞–ª —Å qty (–Ω–∞–ø—Ä–∏–º–µ—Ä '400,00') –∏ –≤ —Å—Ç—Ä–æ–∫–µ –µ—â—ë –±—ã–ª–∞ —Å—É–º–º–∞ ‚Äî –≤–æ–∑—å–º—ë–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é
            if total_tok and qty:
                try:
                    if abs(to_int(total_tok) - qty) == 0:
                        money_tokens = [(w[0], w[4]) for w in ln if RE_MONEY.fullmatch(w[4])]
                        if len(money_tokens) >= 2:
                            money_tokens.sort(key=lambda t: t[0])
                            alt = money_tokens[-2][1]
                            if abs(to_int(alt) - qty) != 0:
                                total = alt
                except Exception:
                    pass

            rows.append({
                "MPN": mpn,
                "Replacem": "",
                "Quantity": qty,
                "Totalsprice": total,
                "Order reference": order
            })

    if not rows:
        return pd.DataFrame(columns=["MPN","Replacem","Quantity","Totalsprice","Order reference"])

    df = pd.DataFrame(rows)
    # –¥–µ–¥—É–ø –ø–æ (Order, MPN)
    df = df.drop_duplicates(subset=["Order reference", "MPN"], keep="last")
    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ Order, –∑–∞—Ç–µ–º –ø–æ MPN
    df = df.sort_values(["Order reference", "MPN"]).reset_index(drop=True)
    return df

# ---------- UI ----------
pdf_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å PDF-—Å—á—ë—Ç", type=["pdf"])
tpl_file = st.file_uploader("–®–∞–±–ª–æ–Ω Excel (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", type=["xlsx"])

if pdf_file:
    pdf_bytes = pdf_file.read()
    df = parse_invoice(pdf_bytes)

    st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
    st.dataframe(df, use_container_width=True)

    if st.button("–°–∫–∞—á–∞—Ç—å Excel"):
        if tpl_file:
            wb = load_workbook(tpl_file); ws = wb.active
        else:
            wb = Workbook(); ws = wb.active
            ws.append(["MPN","Replacem","Quantity","Totalsprice","Order reference"])
        for r in df.itertuples(index=False):
            ws.append(list(r))
        bio = io.BytesIO(); wb.save(bio)
        st.download_button(
            "–°–∫–∞—á–∞—Ç—å waybill.xlsx", bio.getvalue(),
            file_name="waybill.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
else:
    st.info("–ó–∞–ª–µ–π PDF ‚Üí —Å–ø–∞—Ä—Å–∏–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (GAB ‚Üí Daudz., –∫—Ä–∞–π–Ω—è—è —Å–ø—Ä–∞–≤–∞ —Å—É–º–º–∞ ‚Üí Summa, #1xxxxx ‚Üí Order).")
