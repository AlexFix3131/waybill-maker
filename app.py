import streamlit as st, re, io, pandas as pd
from PyPDF2 import PdfReader
import fitz  # PyMuPDF (—Ä–µ–Ω–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è OCR)
import pytesseract
from PIL import Image
from openpyxl import load_workbook, Workbook
from utils import load_profiles, cleanse_mpn

st.set_page_config(page_title="Waybill Maker", page_icon="üì¶", layout="wide")
st.title("üì¶ Waybill Maker")

# --- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø—Ä–∞–≤–∏–ª –∏–∑ YAML
def load_rules_safe():
    try:
        profiles = load_profiles("supplier_profiles.yaml")
        return profiles.get("default", {})
    except Exception:
        # –§–æ–ª–ª–±—ç–∫-–ø—Ä–∞–≤–∏–ª–∞, –µ—Å–ª–∏ YAML –ø–æ–≤—Ä–µ–∂–¥–µ–Ω/–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        return {
            "remove_leading_C_in_mpn": True,
            "materom_mpn_before_dash": True,
            "order_marker_regex": r"(?i)\bOrder[_\s-]*(\d{4,})",
            "mpn_patterns": [
                r"(?i)C?(\d{2}\.\d{5}-\d{4})",
                r"(?i)C?(\d{2}\.\d{5}-\d{3,5})",
                r"(?i)C?(\d{8,})",
            ],
            "qty_patterns": [
                r"(?:(?:QTY|Daudz\.|Qty)\s*[:\-]?\s*)(\d+[\.,]?\d*)",
                r"(?:\s)(\d{1,5})\s*(?:GAB|UNID|KOM)?\b",
            ],
            "total_patterns": [
                r"(\d+[\.,]\d{2})\s*(?:EUR|‚Ç¨)?\s*$",
            ],
        }

rules = load_rules_safe()
order_re = re.compile(rules.get("order_marker_regex", r"(?i)\bOrder[_\s-]*(\d{4,})"))

pdf_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—á–µ—Ç (PDF)", type=["pdf"])
tpl_file = st.file_uploader("–®–∞–±–ª–æ–Ω Excel (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", type=["xlsx"])

# --- –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä PDF: —Ç–µ–∫—Å—Ç ‚Üí –ø—Ä–∏ –Ω—É–∂–¥–µ OCR
def parse_pdf(pdf_bytes: bytes) -> pd.DataFrame:
    rows, current_order_digits = [], None

    # 1) –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é (PyPDF2)
    text_pages = []
    try:
        reader = PdfReader(io.BytesIO(pdf_bytes))
        for page in reader.pages:
            text_pages.append(page.extract_text() or "")
    except Exception:
        text_pages = []

    def too_small(pages):
        # –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –ø–æ—á—Ç–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ —Å–∫–∞–Ω
        return not any(len(p.strip()) > 50 for p in pages)

    # 2) –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –º–∞–ª–æ ‚Äî –≤–∫–ª—é—á–∞–µ–º OCR (PyMuPDF + Tesseract)
    if too_small(text_pages):
        text_pages = []
        doc = fitz.open(stream=pdf_bytes, filetype="pdf")
        for page in doc:
            pix = page.get_pixmap(dpi=200)
            img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
            # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —è–∑—ã–∫–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö; –∏–Ω–∞—á–µ —É–ø–∞–¥—ë–º –Ω–∞ eng
            try:
                ocr_txt = pytesseract.image_to_string(img, lang="eng+rus+lav")
            except Exception:
                ocr_txt = pytesseract.image_to_string(img, lang="eng")
            text_pages.append(ocr_txt)

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–ø–∏—Å–∫—É –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ YAML
    def find_first(pattern_key: str, line: str, conv=None):
        for patt in rules.get(pattern_key, []):
            m = re.search(patt, line)
            if m:
                val = m.group(1)
                if conv:
                    try:
                        return conv(val)
                    except Exception:
                        return None
                return val
        return None

    # 3) –†–∞–∑–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    for text in text_pages:
        for raw_line in text.splitlines():
            line = " ".join(raw_line.split())  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã

            # –°–º–µ–Ω–∞ –±–ª–æ–∫–∞ –∑–∞–∫–∞–∑–∞: Order_123456_...
            m_order = order_re.search(line)
            if m_order:
                current_order_digits = m_order.group(1)

            # MPN
            mpn = find_first("mpn_patterns", line)
            if not mpn:
                continue
            mpn = cleanse_mpn(mpn, rules)  # —É–¥–∞–ª—è–µ–º 'C' –∏ –ø—Ä. –Ω–æ—Ä–º—ã

            # Quantity
            def to_int(x): return int(float(x.replace(",", ".")))
            qty = find_first("qty_patterns", line, to_int)
            if qty is None:
                # fallback: —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ —Ü–µ–Ω–æ–π –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
                m = re.search(r"\b(\d{1,4})\b.*(\d+[.,]\d{2})\s*(?:EUR|‚Ç¨)?\s*$", line)
                if m:
                    qty = int(m.group(1))
            if qty is None:
                qty = 1

            # Totalsprice
            def to_money(x): return round(float(x.replace(",", ".")), 2)
            total = find_first("total_patterns", line, to_money)
            if total is None:
                total = 0.0

            rows.append([mpn, "", qty, total, current_order_digits or ""])

    return pd.DataFrame(rows, columns=["MPN", "Replacem", "Quantity", "Totalsprice", "Order reference"])


# --- UI
if pdf_file:
    df = parse_pdf(pdf_file.read())
    st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
    st.dataframe(df, use_container_width=True)

    st.caption("–ú–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Ç—Ä–æ–∫–∏ –Ω–∏–∂–µ:")
    edited = st.data_editor(df, num_rows="dynamic", use_container_width=True)

    if st.button("–°–∫–∞—á–∞—Ç—å waybill"):
        # –±–µ—Ä—ë–º —Ç–≤–æ–π —à–∞–±–ª–æ–Ω, –ª–∏–±–æ —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        if tpl_file:
            wb = load_workbook(tpl_file)
            ws = wb.active
        else:
            wb = Workbook()
            ws = wb.active
            ws["A1"] = "MPN"
            ws["B1"] = "Replacem"
            ws["C1"] = "Quantity"
            ws["D1"] = "Totalsprice"
            ws["E1"] = "Order reference"

        # –æ—á–∏—Å—Ç–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –∏ –∑–∞–ø–∏—Å—å —Å–æ 2-–π —Å—Ç—Ä–æ–∫–∏
        for r in range(2, 1000):
            for c in range(1, 6):
                ws.cell(row=r, column=c, value=None)

        for i, row in enumerate(edited.values.tolist(), start=2):
            for j, value in enumerate(row, start=1):
                ws.cell(row=i, column=j, value=value)

        bio = io.BytesIO()
        wb.save(bio)
        st.download_button(
            "–°–∫–∞—á–∞—Ç—å waybill.xlsx",
            data=bio.getvalue(),
            file_name="waybill.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )
else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä.")
